---
name: Gradle-docker-push

on:
  workflow_call:
    inputs:
      update_submodules:
        description: Whether or not to update git submodules
        default: false
        required: false
        type: boolean
      git-persist-credentials:
        description: Whether or not to persist git credentials on checkout
        default: true
        required: false
        type: boolean
      perform_gradle_build:
        description: Whether or not to perform a gradle build
        required: false
        type: boolean
        default: false
      perform_oci_image_build:
        description: Whether or not to build a OCI image
        required: false
        type: boolean
        default: false
      java_release:
        description: "Major java version to use for build. Example: 11"
        required: false
        default: "17"
        type: string
      gradle_tasks:
        description: "A string containing the gradle tasks to perform. Example: clean build"
        default: "clean build"
        required: false
        type: string
      gradle_flags:
        description: "A string containing the gradle flags to pass. Example: -Pit=yesq -Djms.port=25446"
        default: ""
        required: false
        type: string
      gradle_opts:
        description: "A string containing the gradle options to pass. Example: -Pit=yesq -Djms.port=25446"
        required: false
        default: ""
        type: string
      gradle_timezone:
        description: TZ definition for gradle buils
        required: false
        default: "Europe/Oslo"
        type: string
      publish_junit_report:
        description: If true, publish a junit report for the junit_report_path.
        required: false
        default: false
        type: boolean
      junit_report_path:
        description: The path where junit test results will be found
        required: false
        default: "**/build/test-results/test/**/*.xml"
        type: string
      oci_image_tag:
        description: "The tag for the image. Defaults to latest"
        default: latest
        required: false
        type: string
      oci_context_path:
        description: |
          The path where the docker files are located. Also called the "context" by docker.
          Defaults to "."
        default: "."
        required: false
        type: string
      oci_repository_name:
        description: |
          The repository name for the image. Example: "radioarkiv/lydbanken-standalone". Folder and image name.
          If not given, docker image will not be built/pushed.
          If it is given, remember to also consider the tag, and remember that azurecr requires the secrets registry_username and registry_password.
        required: false
        type: string
      oci_registry:
        description: The OCI registry
        default: plattform.azurecr.io
        required: false
        type: string
      oci_image_push:
        description: Whether to push the OCI image after build
        default: true
        required: false
        type: boolean
      oci_baseimage_pull:
        description: Whether to pull (updated) base images in dockerfiles
        default: true
        required: false
        type: boolean
    secrets:
      mdb_github_token:
        description: The github token used for checking out repositories
        required: true
      oci_registry_username:
        description: The OCI registry username
        required: false
      oci_registry_password:
        description: The OCI registry password
        required: false
      gradle_secrets:
        description: "A string containing the gradle secrets to pass. Example: -PmyGetAccessToken=SECRET"
        required: false

jobs:

  execute:

    runs-on: lydteamet

    steps:

      - uses: actions/checkout@v2
        with:
          repository: ${{ github.repository }}
          # github context from caller is available here, yay
          ref: ${{ github.sha }}
          submodules: ${{ inputs.update_submodules }}
          token: ${{ secrets.mdb_github_token }}
          persist-credentials: ${{ inputs.git-persist-credentials }}

      - uses: actions/setup-java@v1
        if: ${{ inputs.perform_gradle_build }}
        with:
          java-version: ${{ inputs.java_release }}

      - name: gradle build
        if: ${{ inputs.perform_gradle_build }}
        shell: bash
        run: |
          ./gradlew ${{ secrets.gradle_secrets }} ${{ inputs.gradle_flags }} ${{ inputs.gradle_tasks }}
        env:
          TZ: ${{ inputs.gradle_timezone }}
          GRADLE_OPTS: ${{ inputs.gradle_opts }}

      - name: Publish unit test results
        uses: mikepenz/action-junit-report@v2
        if: ${{ inputs.perform_gradle_build && inputs.publish_junit_report && !cancelled() }}
        with:
          commit: ${{ github.sha }}
          check_name: Unit test results
          report_paths: ${{ inputs.junit_report_path }}
          github_token: ${{ secrets.github_token }}

      - name: Check if oci image already exists
        if: ${{ inputs.perform_oci_image_build }}
        id: pull
        shell: bash
        run: |
          CREDS="$(echo "${{ secrets.oci_registry_username }}:${{ secrets.oci_registry_password }}" | base64 -w 0)"
          CHECKURL="https://${{ inputs.oci_registry }}/v2/${{ inputs.oci_repository_name }}/manifests/${{ inputs.oci_image_tag }}"
          curl --fail --header "Authorization: Basic $CREDS" $CHECKURL \
            && echo "::set-output name=oci_image_exists::true" \
            || echo "::set-output name=oci_image_exists::false"

      - name: Auth for OCI registry
        if: ${{ inputs.perform_oci_image_build && steps.pull.outputs.oci_image_exists == 'false' }}
        uses: docker/login-action@v1
        with:
          registry: ${{ inputs.oci_registry }}
          username: ${{ secrets.oci_registry_username }}
          password: ${{ secrets.oci_registry_password }}

      - name: Manually build and push images
        shell: bash
        run: |
          docker build -t ${{ inputs.oci_registry }}/${{ inputs.oci_repository_name }}:${{ inputs.oci_image_tag }} ${{ inputs.oci_context_path }}
          docker push ${{ inputs.oci_registry }}/${{ inputs.oci_repository_name }}:${{ inputs.oci_image_tag }}
